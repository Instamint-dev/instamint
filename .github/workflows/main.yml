name: CI/CD Pipeline for instamint

on:
  push:
    branches:
      - Feat/CICD_back

jobs:
  init:
    runs-on: ubuntu-latest
    steps:
      - name: Start Cleavr Deployment
        uses: fjogeleit/http-request-action@master
        with:
          url: '${{ secrets.DEPLOY_TRIGGER_HOOK_cleavr_88aly897kw }}'
          method: 'POST'
          data: '{"status": "init" }'
          timeout: 60000
  build:
    needs: init
    runs-on: ubuntu-22.04
    outputs:
      cleavr-step-status: ${{ toJson(steps) }}
      artifact-formatted-time: ${{ steps.artifact.outputs.formattedTime }}
    steps:
      - uses: actions/checkout@v3
        id: checkout

      - uses: actions/setup-node@v3
        id: setup-node
        with:
          node-version: '20'

      - uses: bahmutov/npm-install@v1
        id: npm-install
        with:
          working-directory: backend

      - name: Build app
        id: build-app
        run: npm run build --production
        
      - name: Generate artifact name
        id: artifact
        uses: josStorer/get-current-time@v2.0.2
        with:
          format: YYYYMMDDHHmmss
          utcOffset: "+08:00"

      - name: Upload artifact
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: '${{ steps.artifact.outputs.formattedTime }}'
          path: backend/build/
          if-no-files-found: error

  complete:
    if: always()
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Complete Cleavr Deployment
        uses: fjogeleit/http-request-action@master
        with:
          url: '${{ secrets.DEPLOY_TRIGGER_HOOK_cleavr_88aly897kw }}'
          method: 'POST'
          data: '{"status": "${{ needs.build.result }}" , "steps": ${{ toJson(needs.build.outputs.cleavr-step-status) }} }'
          timeout: 60000
          customHeaders: '{"artifact": "${{ needs.build.outputs.artifact-formatted-time }}"}'

  deploy-frontend:
    needs: complete
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: frontend

      - name: Install dependencies (React project)
        run: cd frontend && npm install

      - name: Build React project
        run: cd frontend && npm run build

      - name: Deploy to Vercel
        run: cd frontend vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --yes
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
